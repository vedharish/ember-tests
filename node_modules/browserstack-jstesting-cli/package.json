{
  "name": "browserstack-jstesting-cli",
  "version": "1.0.1",
  "description": "Command Line tools to start/stop BrowserStackLocal and to launch a browser instance on BrowserStack for js-testing",
  "bin": {
    "start-BrowserStackLocal": "./start-BrowserStackLocal.js",
    "stop-BrowserStackLocal": "./stop-BrowserStackLocal.js",
    "run_on_browserstack": "./run_on_browserstack.js"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/vedharish/browserstack-jstesting-cli.git"
  },
  "keywords": [
    "BrowserStack",
    "jstesting",
    "testem",
    "BrowserStackLocal"
  ],
  "author": {
    "name": "Harish Ved",
    "email": "ved.harish3@gmail.com"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/vedharish/browserstack-jstesting-cli/issues"
  },
  "dependencies": {
    "browserstack": "^1.3.0",
    "browserstacktunnel-wrapper": "^1.4.2",
    "minimist": "^1.2.0",
    "npmlog": "^2.0.3"
  },
  "homepage": "https://github.com/vedharish/browserstack-jstesting-cli#readme",
  "readme": "Testem with BrowserStack\n========================\n\nRun your tests on various browsers hosted on Browserstack!\n\nInstructions\n------------\n\n1. Get a [BrowserStack] account.\n2. Install this package `npm install -g browserstack-jstesting-cli`\n3. This package provides 3 binaries:\n  - start-BrowserStackLocal : This starts the [BrowserStackLocal Binary] on the local machine.\n  - run_on_browserstack     : This starts a browser instance on BrowserStack.\n  - stop-BrowserStackLocal  : This stops a previously started BrowserStackLocal instance\n4. For BrowserStack Authentication export the environment variables for the username and access key of your BrowserStack account.\n   These can be found on the [automate accounts page on BrowserStack](https://www.browserstack.com/accounts/automate)\n   `export BROWSERSTACK_USERNAME=<browserstack-username> && export BROWSERSTACK_KEY=<browserstack-access-key>`\n\n   Alternatively, you can use command-line options as explained below.\n\n## CLI Options\n\n### Start Binary\n\n#### Module - specific options\n\n- `--logLevel value` : Specify the level of logging. This corresponds to [logging levels of the npmlog package](https://github.com/npm/npmlog#loglevelprefix-message-).\n                       The binary output is also displayed at logLevel `silly`.\n- `--async` : Start the binary in `async` mode. This means that the command will wait till the `BrowserStackLocal` binary starts successfully and then will return\n              without stopping the binary. You can later stop the binary with `stop-BrowserStackLocal` script. In `sync` mode, stopping the command will stop the binary.\n- `--pidFile file` : Specify a pidFile to write the `BrowserStackLocal` binary pid to. This is handled automatically and you do not need to specify this option.\n\n#### Binary - specific options\n\nYou can pass in any option specified [here](https://github.com/pghalliday/node-BrowserStackTunnel#api) as `new BrowserStackTunnel` arguments. Any non-module level option \nis forwarded to this function.\n\nIf a `BrowserStack` access_key is not provided as an argument (`--key=access_key`) then the environment variable `BROWSERSTACK_ACCESS_KEY` is used.\n\nThe `--hosts` options requires a hash, This must be specified as `--hosts name1,port1,sslFlag1,name2,port2,sslFlag2` as the binary uses internally.\n\nAll `BrowserStackLocal` binary related modifiers are [listed here](https://www.browserstack.com/local-testing#modifiers)\n\n### Stop Binary\n\n#### Module - specific options\n\n- `--logLevel value` : Specify the level of logging. This corresponds to [logging levels of the npmlog package](https://github.com/npm/npmlog#loglevelprefix-message-).\n- `--pidFile file` : Specify a pidFile to write the `BrowserStackLocal` binary pid to. This is handled automatically and you do not need to specify this option.\n- `--pid pid` : Specify a pid to kill.\n\n### Run tests / Launch Browser\n\n#### Module - specific options\n\n- `--logLevel value` : Specify the level of logging. This corresponds to [logging levels of the npmlog package](https://github.com/npm/npmlog#loglevelprefix-message-).\n- `--hardTimeout value` : The maximum amount of time the the tests should run. This is in conjuction with `BrowserStack` specific timeouts mentioned later.\n                          The value should be in milliseconds. The default `hardTimeout` is 600000.\n\n#### BrowserStack Client specific options\n\nThese option can be either from [here](https://github.com/scottgonzalez/node-browserstack#browserstackcreateclientsettings) or [here](https://github.com/scottgonzalez/node-browserstack#clientcreateworkersettings-callback).\n\n\n- The `--timeout value` option specifies the worker specific timeout in seconds.\n- The server host and port are specified as `--server.host https://api.browserstack.com --server.port 80`\n- Currently, `--username`, `--pasword`, `--version`, `--server.host` and `--server.port` options are identified as `createClient` options. Others will be supplies to `createWorker` settings.\n\n## Testem configuration\n\n### Start/Stop\n\nYou need to run the scripts `start-BrowserStackLocal` and `stop-BrowserStackLocal`, respectively\nwhen starting/stopping the test run. Put this configuration in your `testem.json`:\n\n```json\n\"on_start\": \"$(npm bin)/start-BrowserStackLocal async\",\n\"on_exit\": \"$(npm bin)/stop-BrowserStackLocal\",\n```\n\nThe command start-BrowserStackLocal will fail if it is not provided with a `localIdentifier` as an argument and\nthere is another BrowserStackLocal binary instance running.\nYou can use `--force` option to make any concurrently running binary to close connections.\nAlternatively, pass `--localIdentifier=identifier` to create a new instance which is idetified by string `identifier`\nand you can have multiple `BrowserStackLocal` binary instances, each with different identifiers.\n\n### Launcher\n\nYou need to configure the launchers manually in your testem configuration. Examples are given in\n`sample-testem.json`. It is basically using the script `run_on_browserstack.js` with the name of the\nbrowser as argument.\n\n```json\n\"launchers\": {\n  \"bs_chrome\": {\n    \"command\": \"$(npm bin)/run_on_browserstack --os Windows --os_version 10 --browser chrome  --browser_version latest --url <url>\",\n    \"protocol\": \"browser\"\n  }\n}\n```\n\n`<url>` gets replaced with the proper test URL by testem.\n\nThe arguments of `run_on_browserstack` are\n\nYou need to add single quotes if one of the arguments contains a space (e.g. `'OS X' 'Mountain Lion'`).\nYou'll find further examples in `sample-testem.json` of this repository.\n\n\n## Running Testem\n\nInstall [testem] globally by running `npm install testem -g`. This might be optional depending on\nyour project's test suite setup.\n\nUse `testem ci -l bs_chrome` to test out the setup with just the Chrome browser, configured above.\nRun `testem ci` to run it on all configured browsers - see `testem launchers` for the full list.\n\n## Optional: browserstack-cli\n\nYou can optionally install browserstack-cli in order to get a list of __all__ available browsers (as opposed to `testem launchers` which only lists the browsers, you have configured in `testem.json`), devices\nand operating systems.\n\n```sh\nnpm install -g browserstack-cli\nbrowserstack setup # asks for your credentials and stores the information in $HOME/.browserstack\nbrowserstack browsers | less -r\n```\n\n[BrowserStack]: http://www.browserstack.com\n[BrowserStackLocal Binary]: https://www.browserstack.com/local-testing\n[testem]: https://github.com/testem/testem\n",
  "readmeFilename": "README.md",
  "gitHead": "ab722007a7fba0e77062ce66eeb1fe30bf1d4478",
  "_id": "browserstack-jstesting-cli@1.0.1",
  "_shasum": "d104419219346c9d6a7bf40b92b4b7727f0d10dd",
  "_from": "browserstack-jstesting-cli@*"
}
